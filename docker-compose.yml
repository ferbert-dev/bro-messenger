services:
  api:
    build: .
    container_name: backend
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/${MONGO_INITDB_DATABASE}?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - EXPIRES_IN=${EXPIRES_IN}
      - PORT=${PORT}
      - SECURITY_WEB_ORIGINS=${SECURITY_WEB_ORIGINS}
      - SECURITY_API_ORIGINS=${SECURITY_API_ORIGINS}
      - SECURITY_WS_ORIGINS=${SECURITY_WS_ORIGINS}
      - SECURITY_JSON_LIMIT=${SECURITY_JSON_LIMIT}
      - SECURITY_AVATAR_MAX_BYTES=${SECURITY_AVATAR_MAX_BYTES}
    volumes:
      - .:/app
      - /app/node_modules     # prevents host node_modules from overwriting container deps
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - >
            node -e "const http=require('http');const port=process.env.PORT||3005;http.get('http://localhost:'+port+'/health',res=>process.exit(res.statusCode===200?0:1)).on('error',()=>process.exit(1));"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend
  mongo:
    image: mongo:latest
    container_name: mongo-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
  web:
    image: nginx:alpine
    container_name: frontend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/var/www/frontend:ro
      - ./uploads:/var/www/uploads:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://api:${PORT}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - backend

volumes:
  mongo_data:

networks:
  backend:
    driver: bridge
